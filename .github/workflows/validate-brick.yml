name: Validate Brick

on:
  workflow_call:
    inputs:
      brick_name:
        description: "Name of the brick to validate"
        required: true
        type: string
      brick_config:
        description: "JSON configuration for brick generation"
        required: true
        type: string
      expected_files:
        description: "Space-separated list of files that should be generated"
        required: true
        type: string

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dart-lang/setup-dart@v1
        with:
          sdk: stable

      - name: üì¶ Install Mason CLI
        run: dart pub global activate mason_cli

      - name: üîç Validate brick structure
        run: |
          cd ${{ inputs.brick_name }}

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ brick.yaml
          if [ ! -f "brick.yaml" ]; then
            echo "‚ùå brick.yaml not found"
            exit 1
          fi

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–µ—Ä—Å–∏–∏ –≤ brick.yaml
          if ! grep -q "^version:" brick.yaml; then
            echo "‚ùå Version not found in brick.yaml"
            exit 1
          fi

          VERSION=$(grep "^version:" brick.yaml | cut -d' ' -f2)
          echo "üì¶ Found version: $VERSION in brick.yaml"

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –æ–ø–∏—Å–∞–Ω–∏—è (–º–∞–∫—Å 120 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è BrickHub)
          if grep -q "^description:" brick.yaml; then
            DESCRIPTION=$(grep "^description:" brick.yaml | cut -d: -f2- | sed 's/^ *//')
            DESC_LENGTH=$(echo "$DESCRIPTION" | wc -c)
            if [ $DESC_LENGTH -gt 120 ]; then
              echo "‚ùå Description too long: $DESC_LENGTH characters (max 120)"
              echo "Description: $DESCRIPTION"
              exit 1
            fi
            echo "‚úÖ Description length OK: $DESC_LENGTH/120 characters"
          fi

          mason bundle . -t dart -o ../temp_${{ inputs.brick_name }}
          echo "‚úÖ Brick ${{ inputs.brick_name }} structure is valid"

      - name: üß™ Test brick generation
        run: |
          mkdir test_project
          cd test_project

          # –î–æ–±–∞–≤–ª—è–µ–º brick –≤ Mason
          mason add ${{ inputs.brick_name }} --path ../${{ inputs.brick_name }}

          # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
          echo '${{ inputs.brick_config }}' > vars.json

          # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º brick
          mason make ${{ inputs.brick_name }} --config-path vars.json -o .

          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–µ —Ñ–∞–π–ª—ã
          expected="${{ inputs.expected_files }}"
          for file in $expected; do
            if [ ! -f "$file" ]; then
              echo "‚ùå Expected file $file not found"
              exit 1
            fi
            echo "‚úÖ Found expected file: $file"
          done

          echo "‚úÖ Brick ${{ inputs.brick_name }} generates correctly"

      - name: üßπ Cleanup
        if: always()
        run: |
          rm -rf test_project
          rm -rf temp_${{ inputs.brick_name }}
