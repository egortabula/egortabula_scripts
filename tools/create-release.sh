
#!/bin/bash

# Script to create a new release for a brick
# Usage: ./create-release.sh

set -e

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ git-cliff
if ! command -v git-cliff &> /dev/null; then
    echo "‚ùå Error: git-cliff is not installed"
    echo ""
    echo "üìã git-cliff is required for automatic version bumping and changelog generation."
    echo "üîó Install it from: https://github.com/orhun/git-cliff"
    echo ""
    echo "Installation options:"
    echo "  ‚Ä¢ Cargo: cargo install git-cliff"
    echo "  ‚Ä¢ Homebrew: brew install git-cliff"
    echo "  ‚Ä¢ Download binary: https://github.com/orhun/git-cliff/releases"
    echo ""
    exit 1
fi

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ (–≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è cliff.toml)
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"
CLIFF_CONFIG="$PROJECT_ROOT/cliff.toml"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ cliff.toml —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if [ ! -f "$CLIFF_CONFIG" ]; then
    echo "‚ùå Error: cliff.toml not found at $CLIFF_CONFIG"
    echo "Please make sure you are in the correct project directory"
    exit 1
fi

# –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö bricks (–ª–µ–≥–∫–æ –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ)
AVAILABLE_BRICKS=(
    "flutter_coverage_updater"
    # –î–æ–±–∞–≤—å—Ç–µ –∑–¥–µ—Å—å –Ω–æ–≤—ã–µ bricks
)

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞
FAREWELL_MESSAGE="
ÔøΩ Thank you for using Mason Brick Release Script!
ÔøΩ Created with ‚ù§Ô∏è by @egortabula
‚≠ê If this script helped you, consider giving it a star on GitHub!
üîó GitHub: https://github.com/egortabula/egortabula_scripts"

# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è git –∫–æ–º–∞–Ω–¥
cd "$PROJECT_ROOT"

echo "üöÄ Mason Brick Release Script"
echo "=============================="

# 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã –≤ main –≤–µ—Ç–∫–µ
CURRENT_BRANCH=$(git branch --show-current)
if [ "$CURRENT_BRANCH" != "main" ]; then
    echo "‚ùå Error: You must be on the main branch. Current branch: $CURRENT_BRANCH"
    exit 1
fi
echo "‚úÖ On main branch"

# 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –∑–∞–∫–æ–º–º–∏—á–µ–Ω–æ
if ! git diff-index --quiet HEAD --; then
    echo "‚ùå Error: You have uncommitted changes. Please commit or stash them first."
    git status --short
    exit 1
fi
echo "‚úÖ All changes committed"

# 3. –í—ã–±–æ—Ä brick'–∞
echo ""
echo "üì¶ Available bricks:"
for i in "${!AVAILABLE_BRICKS[@]}"; do
    echo "  $((i+1)). ${AVAILABLE_BRICKS[$i]}"
done

echo ""
read -p "Select brick (1-${#AVAILABLE_BRICKS[@]}): " brick_choice

# –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—ã–±–æ—Ä–∞
if ! [[ "$brick_choice" =~ ^[0-9]+$ ]] || [ "$brick_choice" -lt 1 ] || [ "$brick_choice" -gt "${#AVAILABLE_BRICKS[@]}" ]; then
    echo "‚ùå Invalid choice"
    exit 1
fi

BRICK_NAME="${AVAILABLE_BRICKS[$((brick_choice-1))]}"
echo "Selected brick: $BRICK_NAME"

# 4. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–µ–≥ –¥–ª—è brick'–∞
CURRENT_TAG=$(git tag --list "$BRICK_NAME-v*" | sort -V | tail -n1)
if [ -z "$CURRENT_TAG" ]; then
    echo "üì¶ No previous releases found for $BRICK_NAME"
    CURRENT_VERSION="0.0.0"
else
    CURRENT_VERSION=$(echo $CURRENT_TAG | sed "s/$BRICK_NAME-v//")
    echo "üì¶ Current version: $CURRENT_VERSION"
fi

# 5. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â—É—é –≤–µ—Ä—Å–∏—é —á–µ—Ä–µ–∑ git-cliff
echo ""
echo "üîç Analyzing changes since last release..."

# –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è git-cliff output
TEMP_OUTPUT=$(mktemp)

if git-cliff --config "$CLIFF_CONFIG" --bumped-version --include-path "$BRICK_NAME/**" > "$TEMP_OUTPUT" 2>&1; then
    NEXT_VERSION=$(cat "$TEMP_OUTPUT")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –Ω–µ—á–µ–≥–æ –±–∞–º–ø–∞—Ç—å
    if grep -q "There is nothing to bump" "$TEMP_OUTPUT"; then
        echo "‚ùå No changes requiring version bump found for $BRICK_NAME"
        echo "Current version $CURRENT_VERSION is already up to date"
        rm "$TEMP_OUTPUT"
        exit 1
    fi
    
    rm "$TEMP_OUTPUT"
    
    # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã
    NEXT_VERSION=$(echo "$NEXT_VERSION" | sed 's/^v//' | tr -d '\n\r' | xargs)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –≤–µ—Ä—Å–∏—è –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Ç–µ–∫—É—â–µ–π
    if [ -z "$NEXT_VERSION" ] || [ "$NEXT_VERSION" = "$CURRENT_VERSION" ]; then
        echo "‚ùå No changes requiring version bump found for $BRICK_NAME"
        echo "Current version $CURRENT_VERSION is already up to date"
        exit 1
    fi
else
    echo "‚ùå Error running git-cliff:"
    cat "$TEMP_OUTPUT"
    rm "$TEMP_OUTPUT"
    exit 1
fi

NEW_TAG="$BRICK_NAME-v$NEXT_VERSION"

echo "üéØ Next version: $NEXT_VERSION"
echo "üè∑Ô∏è New tag: $NEW_TAG"

# 6. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
echo ""
echo "üìã Changes since last release:"
if [ -n "$CURRENT_TAG" ]; then
    git log $CURRENT_TAG..HEAD --oneline --pretty=format:"  - %s" -- $BRICK_NAME/ 2>/dev/null || echo "  No specific changes in $BRICK_NAME/"
else
    echo "  First release for $BRICK_NAME"
fi

# 7. –°–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–æ–∑–¥–∞—Ç—å –ª–∏ —Ç–µ–≥
echo ""
read -p "‚ùì Create tag $NEW_TAG? (y/N): " -n 1 -r
echo

if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "‚ùå Tag creation cancelled"
    echo "$FAREWELL_MESSAGE"
    exit 0
fi

# 8. –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ç–µ–≥
echo "üè∑Ô∏è Creating local tag..."
git tag "$NEW_TAG"
echo "‚úÖ Local tag $NEW_TAG created"

# 9. –°–ø—Ä–∞—à–∏–≤–∞–µ–º –∑–∞–ø—É—à–∏—Ç—å –ª–∏ —Ç–µ–≥
echo ""
read -p "‚ùì Push tag $NEW_TAG to remote? This will trigger CD pipeline! (y/N): " -n 1 -r
echo

if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "‚è∏Ô∏è Tag created locally but not pushed"
    echo "üí° To push later: git push origin $NEW_TAG"
    echo "üí° To delete local tag: git tag -d $NEW_TAG"
    echo "$FAREWELL_MESSAGE"
    exit 0
fi

# 10. –ü—É—à–∏–º —Ç–µ–≥
echo "üì§ Pushing tag to remote..."
git push origin "$NEW_TAG"

echo ""
echo "‚úÖ Release $NEW_TAG created and pushed successfully!"
echo "üîó CD Pipeline will start automatically"
echo "üåê Check progress: https://github.com/$(git remote get-url origin | sed 's/.*github\.com[:/]\([^.]*\)\.git/\1/')/actions"
echo "$FAREWELL_MESSAGE"
